import os
import telebot 
from telebot.types import ReplyKeyboardRemove
from telebot import types
import time
from flask import Flask, request 
import json
from datetime import datetime

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• RAILWAY ====================
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
TOKEN = os.environ.get('TELEGRAM_TOKEN', '')
MASTER_PASSWORD = os.environ.get('MASTER_PASSWORD', 'default_password')
MASTER_CONTACT = os.environ.get('MASTER_CONTACT', '–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT = int(os.environ.get('PORT', 5000))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')
RAILWAY_ENVIRONMENT = os.environ.get('RAILWAY_ENVIRONMENT', 'production')


# ==================== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ====================
def validate_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    missing_vars = []
    
    if not TOKEN:
        missing_vars.append('TELEGRAM_TOKEN')
    if not MASTER_PASSWORD:
        missing_vars.append('MASTER_PASSWORD')
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway:")
        return False
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
bot = telebot.TeleBot(token=TOKEN, threaded=True)
app = Flask(__name__)


PRICE_DIR = "price_photo"
os.makedirs(PRICE_DIR, exist_ok=True)

REVIEWS_DIR = "reviews"
os.makedirs(REVIEWS_DIR, exist_ok=True)
FLASH_DIR = "welcome"
os.makedirs(FLASH_DIR, exist_ok=True)

RECORDS_DIR = "records"
os.makedirs(RECORDS_DIR, exist_ok=True)

REVIEWS_FILE = os.path.join(REVIEWS_DIR, "reviews.json")

BACKUP_DIR = os.path.join(REVIEWS_DIR, "backups")
os.makedirs(BACKUP_DIR, exist_ok=True)


def get_environment_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return {
        'environment': RAILWAY_ENVIRONMENT,
        'webhook_url': WEBHOOK_URL,
        'port': PORT
    }

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Railway"""
    if WEBHOOK_URL:
        try:
            bot.remove_webhook()
            time.sleep(1)
            webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
            bot.set_webhook(url=webhook_url)
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    else:
        print("‚ÑπÔ∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")
        return False

def start_polling():
    """–ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    while True:
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            bot.polling(none_stop=True, timeout=30, long_polling_timeout=10)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

# ==================== FLASK ROUTES ====================
@app.route('/')
def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    env_info = get_environment_info()
    return f"""
    <h1>ü§ñ</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</p>
    <p><strong>–°—Ä–µ–¥–∞:</strong> {env_info['environment']}</p>
    <p><strong>Webhook:</strong> {env_info['webhook_url'] or '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}</p>
    <p><strong>–í–µ—Ä—Å–∏—è:</strong> 1.0</p>
    <hr>
    <p><a href="/env">–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è</a></p>
    <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</a></p>
    """

@app.route('/env')
def show_environment():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    env_info = get_environment_info()
    return {
        'bot_name': env_info['bot_name'],
        'environment': env_info['environment'],
        'webhook_enabled': bool(WEBHOOK_URL),
        'max_reviews_per_page': env_info['max_reviews'],
        'backup_retention_days': env_info['backup_retention_days'],
        'master_contact_configured': bool(MASTER_CONTACT)
    }

@app.route('/health')
def health_check():
    """Health check –¥–ª—è Railway"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [PRICE_DIR, REVIEWS_DIR, RECORDS_DIR, BACKUP_DIR]
        dirs_status = all(os.path.exists(dir_path) for dir_path in required_dirs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        files_status = all([
            os.path.exists(REVIEWS_FILE) or not reviews_list,
            True  # –§–æ—Ç–æ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        ])
        
        status = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "directories": dirs_status,
            "files": files_status,
            "reviews_count": len(reviews_list),
            "environment": RAILWAY_ENVIRONMENT
        }
        
        return status, 200
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}, 500

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Railway"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'OK'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
def load_reviews():
    try:
        with open(REVIEWS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
def save_reviews(reviews):
    with open(REVIEWS_FILE, 'w', encoding='utf-8') as f:
        json.dump(reviews, f, ensure_ascii=False, indent=2)

master_list = []

master_data = {}
user_data = {}
reviews_list = load_reviews()
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–ª–∏–µ–Ω—Ç")
    btn2 = types.KeyboardButton("–ú–∞—Å—Ç–µ—Ä")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–ª—å", reply_markup=markup)

@bot.message_handler(func=lambda message:message.text == "–ú–∞—Å—Ç–µ—Ä")
def password_request(message):
    password = bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(password, masterauto)
def masterauto(message):
    password = message.text
    if password == MASTER_PASSWORD:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("üè† –ó–∞–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
        markup.add(btn)
        bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ" ,reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        start(message)

@bot.message_handler(func=lambda message:message.text == "üè† –ó–∞–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
def master_menu(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å")
        btn2 = types.KeyboardButton("‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
        btn3 = types.KeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–∞–π—Å")
        btn4 = types.KeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
        markup.add(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@bot.message_handler(func=lambda message:message.text == "‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
def request_place(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
    markup.add(btn)
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞", reply_markup=markup)
    bot.register_next_step_handler(msg, process_request_place)
def process_request_place(message):
    if message.text == "üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞":
        master_menu(message)
    else:
        place(message)

@bot.message_handler(content_types=['photo'])
def place(message):
    try:
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = file_info.file_path.split('.')[-1]
            filename = f"place.{file_extension}"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
            file_path = os.path.join(RECORDS_DIR, filename)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ: {filename}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ master_data
            # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö
            master_data['current_place'] = {
                'filename': filename,
                'file_path': file_path,
                'timestamp': message.date,
                'set_by': message.from_user.id
            }
            
            bot.reply_to(message, "‚úÖ –ú–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            master_menu(message)
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            master_menu(message)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        master_menu(message)


@bot.message_handler(func=lambda message:message.text == "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–∞–π—Å")
def see(message):
    with open('records/place.jpg', 'rb') as photo1:
        bot.send_photo(message.chat.id, photo1, "üìÖ –¢–µ–∫—É—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
    with open('price_photo/price.jpg', 'rb') as photo2:
            bot.send_photo(message.chat.id, photo2, "–¢–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å üí∏")
    master_menu(message)

@bot.message_handler(func=lambda message:message.text == "üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å")
def request_price(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
    markup.add(btn)
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø—Ä–∞–π—Å–æ–º –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞", reply_markup=markup)
    bot.register_next_step_handler(msg, process_request_price)

def process_request_price(message):
    if message.text == "üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞":
        master_menu(message)
    else:
        price(message)

@bot.message_handler(content_types=['photo'])
def price(message):
    try:
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = file_info.file_path.split('.')[-1]
            filename = f"price.{file_extension}"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
            file_path = os.path.join(PRICE_DIR, filename)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ: {filename}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ master_data
            # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö
            master_data['current_price'] = {
                'filename': filename,
                'file_path': file_path,
                'timestamp': message.date,
                'set_by': message.from_user.id
            }
            
            bot.reply_to(message, "‚úÖ –ü—Ä–∞–π—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            master_menu(message)
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            master_menu(message)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        master_menu(message)

@bot.message_handler(func=lambda message: message.text == "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
def master_reviews_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
    btn2 = types.KeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã")
    btn3 = types.KeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
    btn4 = types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã")
    markup.add(btn1, btn2)
    markup.row(btn4)
    markup.row(btn3)
    
    total_reviews = len(reviews_list)
    if total_reviews > 0:
        avg_rating = sum(r.get('rating', 5) for r in reviews_list) / total_reviews
        bot.send_message(
            message.chat.id,
            f"üìä –£ –≤–∞—Å {total_reviews} –æ—Ç–∑—ã–≤–æ–≤\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞")
def back_master(message):
    master_menu(message)
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
def show_statistics(message):
    if not reviews_list:
        bot.send_message(message.chat.id, "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        master_reviews_menu(message)
        return
    
    total = len(reviews_list)
    rating_counts = {1:0, 2:0, 3:0, 4:0, 5:0}
    
    for review in reviews_list:
        rating = review.get('rating', 5)
        rating_counts[rating] = rating_counts.get(rating, 0) + 1
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:**\n\n"
    stats_text += f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}\n"
    
    if any(review.get('rating') for review in reviews_list):
        avg_rating = sum(r.get('rating', 5) for r in reviews_list) / total
        stats_text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5\n\n"
        
        for rating in range(5, 0, -1):
            count = rating_counts[rating]
            percentage = (count / total) * 100
            stats_text += f"{'‚≠ê' * rating}: {count} ({percentage:.1f}%)\n"
    
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')
    master_reviews_menu(message)





@bot.message_handler(func=lambda message: message.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã")
def see_rating(message):
    if not reviews_list:  
        bot.send_message(message.chat.id, "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        master_reviews_menu(message)
        return
    
    for i, review in enumerate(reversed(reviews_list), 1):  # –ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        user_name = review.get('user_name', '–ê–Ω–æ–Ω–∏–º')
        rating = review.get('rating', 5)
        text = review.get('text', '')
        date = review.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        review_text = (
            f"**–û—Ç–∑—ã–≤ #{i}**\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n"
            f"üí¨ {text}\n"
            f"üë§ {user_name}\n"
            f"üìÖ {date}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )
        
        bot.send_message(message.chat.id, review_text, parse_mode='Markdown')
    
    # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    master_reviews_menu(message)

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã")
def request_delete_all_reviews(message):
    if not reviews_list:
        bot.send_message(message.chat.id, "üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        master_reviews_menu(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ")
    btn2 = types.KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
    markup.add(btn1, btn2)
    
    bot.send_message(
        message.chat.id,
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç–∑—ã–≤—ã ({len(reviews_list)} —à—Ç.).\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ")
def confirm_delete_all_reviews(message):
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    backup_file = os.path.join(BACKUP_DIR, f"reviews_backup_{int(time.time())}.json")
    try:
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(reviews_list, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    deleted_count = len(reviews_list)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    reviews_list.clear()
    save_reviews(reviews_list)
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –æ—Ç–∑—ã–≤–æ–≤\n"
        f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}",
        reply_markup=ReplyKeyboardRemove()
    )
    master_reviews_menu(message)

@bot.message_handler(func=lambda message: message.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
def cancel_delete_reviews(message):
    bot.send_message(
        message.chat.id,
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    master_reviews_menu(message)


@bot.message_handler(func=lambda message:message.text == "–ö–ª–∏–µ–Ω—Ç")
def client(message):
    with open('welcome/flash.jpg', 'rb') as photo:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("üè† –ó–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn)
        bot.send_photo(message.chat.id, photo, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=markup) 
@bot.message_handler(func=lambda message:message.text == "üè† –ó–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def client_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üí∏ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–π—Å–æ–º")
    btn2 = types.KeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ—Å–Ω–∏—Ü—ã")
    btn3 = types.KeyboardButton("‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    btn4 = types.KeyboardButton("üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
    markup.add(btn1)
    markup.row(btn4)
    markup.row(btn2)
    markup.row(btn3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@bot.message_handler(func=lambda message:message.text == "üí∏ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–π—Å–æ–º")
def learn_price(message):
    with open('price_photo/price.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)
    client_menu(message)    

@bot.message_handler(func=lambda message:message.text == "üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞")
def see_place(message):
    with open('records/place.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, "–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∞–∫—É—Ç–∞–ª—å–Ω–∞, –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—Ç–æ—á–Ω–∏—Ç–µ")
    client_menu(message)

@bot.message_handler(func=lambda message:message.text == "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ—Å–Ω–∏—Ü—ã")
def sign_up(message):
    bot.send_message(message.chat.id, f"–î–µ—Ä–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–∞—Å—Ç–µ—Ä–∞, –¥–ª—è –∑–∞–ø–∏—Å–∏‚ò∫Ô∏è:{MASTER_CONTACT}")
    client_menu(message)



@bot.message_handler(func=lambda message: message.text == "‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def request_review(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üè† –û—Ç–º–µ–Ω–∞")
    markup.add(btn1)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    rating_markup = types.InlineKeyboardMarkup(row_width=5)
    ratings = []
    for i in range(1, 6):
        ratings.append(types.InlineKeyboardButton("‚≠ê" * i, callback_data=f"rating_{i}"))
    rating_markup.add(*ratings)
    
    bot.send_message(
        message.chat.id, 
        "üìù –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
        reply_markup=markup
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:", reply_markup=rating_markup)

@bot.message_handler(func=lambda message:message.text == "üè† –û—Ç–º–µ–Ω–∞")
def back_client_menu(message):
    client_menu(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rating_"))
def process_rating(call):
    rating = int(call.data.split("_")[1])
    user_data[call.from_user.id] = {'rating': rating}
    
    bot.edit_message_text(
        f"‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} ‚≠ê\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤:",
        call.message.chat.id,
        call.message.message_id
    )
    
    msg = bot.send_message(call.message.chat.id, "üí¨ –í–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(msg, process_review_with_rating)

def process_review_with_rating(message):
    user_id = message.from_user.id
    if user_id not in user_data or 'rating' not in user_data[user_id]:
        client_menu(message)
        return
    
    rating = user_data[user_id]['rating']
    
    review = {
        'user_id': user_id,
        'user_name': f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip(),
        'rating': rating,
        'text': message.text,
        'date': datetime.now().strftime("%d.%m.%Y %H:%M"),
        'timestamp': time.time()
    }
    

    reviews_list.append(review)
    save_reviews(reviews_list)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_data:
        del user_data[user_id]
    
    bot.send_message(
        message.chat.id, 
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ ({rating}‚≠ê)! –û–Ω –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å!",
        reply_markup=ReplyKeyboardRemove()
    )
    client_menu(message)

bot.polling(non_stop=True)
# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ' if TOKEN else '‚ùå'}")
    print(f"üåê –°—Ä–µ–¥–∞: {RAILWAY_ENVIRONMENT}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if not validate_environment_variables():
        print("‚ùå –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    required_dirs = [PRICE_DIR, REVIEWS_DIR, FLASH_DIR, RECORDS_DIR]
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {dir_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
    if WEBHOOK_URL and setup_webhook():
        print("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ WEBHOOK")
        app.run(host='0.0.0.0', port=PORT, debug=False)
    else:
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ POLLING")
        start_polling()

if __name__ == '__main__':
    run_bot()
